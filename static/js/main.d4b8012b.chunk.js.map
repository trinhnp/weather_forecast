{"version":3,"sources":["WeatherForecast.js","App.js","serviceWorker.js","index.js"],"names":["WeatherForecast","props","this","url","data1","map","item","src","icon","alt","city","main","description","parseFloat","data2","temp","toFixed","humidity","data3","speed","React","Component","App","state","input","blank","handleChange","bind","handleSubmit","event","setState","target","value","preventDefault","concat","console","log","fetch","then","resp","json","res","weather","wind","className","onSubmit","onChange","placeholder","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kQA8BeA,G,kBAzBb,WAAYC,GAAQ,qEACZA,I,sEAEE,IAAD,OACP,OACE,6BACDC,KAAKD,MAAME,IACPD,KAAKD,MAAMG,MACVF,KAAKD,MAAMG,MAAMC,KAAI,SAACC,GAAD,OACnB,6BACE,yBAAKC,IAAG,0CAAqCD,EAAKE,KAA1C,QAAsDC,IAAI,SAClE,+BAAI,qCAAJ,IAAmB,EAAKR,MAAMS,MAC9B,+BAAI,wCAAJ,IAAsBJ,EAAKK,KAA3B,MAAoCL,EAAKM,aACzC,+BAAI,2CAAJ,IAAyBC,WAAW,EAAKZ,MAAMa,MAAMC,KAAK,QAAQC,QAAQ,GAA1E,OACA,+BAAI,yCAAJ,IAAuB,EAAKf,MAAMa,MAAMG,SAAxC,MACA,+BAAI,qCAAc,EAAKhB,MAAMiB,MAAMC,MAAnC,aAGJ,iC,GApBoBC,IAAMC,YCuErBC,E,YAnEb,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KACDsB,MAAQ,CACXC,MAAO,GACPd,KAAM,GACNP,IAAK,GACLC,MAAO,GACPU,MAAO,GACPI,MAAM,GACNO,MAAO,IAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAZH,E,0EAgBNE,GACX3B,KAAK4B,SAAS,CACZN,MAAOK,EAAME,OAAOC,U,mCAKXH,GACXA,EAAMI,iBACN/B,KAAK4B,SAAS,CACZpB,KAAMR,KAAKqB,MAAMC,MACjBrB,IAAKD,KAAKqB,MAAME,MAAMS,OAAO,qDAAsDhC,KAAKqB,MAAMC,MAAO,2CACrGA,MAAO,KAETW,QAAQC,IAAIlC,KAAKqB,MAAMpB,IAAK,OAC5BgC,QAAQC,IAAIlC,KAAKqB,MAAMb,KAAM,UAC7ByB,QAAQC,IAAIlC,KAAKqB,MAAMC,MAAO,W,+BAItB,IAAD,OACIa,MAAMnC,KAAKqB,MAAMpB,KAAKmC,MAAK,SAACC,GACrCA,EAAKC,OAAOF,MAAK,SAACG,GAChB,EAAKX,SAAS,CACZ1B,MAAOqC,EAAIC,QACX5B,MAAO2B,EAAI9B,KACXO,MAAOuB,EAAIE,aAIjB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aACb,0BAAMC,SAAU3C,KAAK0B,cACnB,2BACEI,MAAO9B,KAAKqB,MAAMC,MAClBsB,SAAU5C,KAAKwB,aACfqB,YAAY,uBACd,4BAAQC,KAAK,UAAb,WAKF,kBAAC,EAAD,CAAiBtC,KAAMR,KAAKqB,MAAMb,KAAMN,MAAOF,KAAKqB,MAAMnB,MAAOU,MAAOZ,KAAKqB,MAAMT,MAAOI,MAAOhB,KAAKqB,MAAML,c,GA5DpGE,IAAMC,WCMJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.d4b8012b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass WeatherForecast extends React.Component {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(props) {\r\n    super(props);\r\n    };\r\n  render() {    \r\n    return (\r\n      <div>\r\n    {this.props.url}\r\n        {this.props.data1 ?\r\n          this.props.data1.map((item) =>\r\n            <div>\r\n              <img src={`http://openweathermap.org/img/w/${item.icon}.png`} alt=\"icon\"/>              \r\n              <p> <b>City: </b> {this.props.city}</p>\r\n              <p> <b>Weather: </b> {item.main} , {item.description}</p>\r\n              <p> <b>Temperature:</b> {parseFloat(this.props.data2.temp-273.15).toFixed(0)} C </p>\r\n              <p> <b>Humidity: </b> {this.props.data2.humidity} %</p>\r\n              <p> <b>Wind: </b>{this.props.data3.speed} mps </p>              \r\n            </div>)\r\n          :\r\n          <p></p>\r\n        }\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherForecast\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport WeatherForecast from './WeatherForecast';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      city: '',\n      url: '',\n      data1: '',\n      data2: '',\n      data3:'',\n      blank: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({\n      city: this.state.input,\n      url: this.state.blank.concat(\"https://api.openweathermap.org/data/2.5/weather?q=\", this.state.input, \"&appid=ba4eac3926cb7d59a3b93b6cd25a2bee\"),\n      input: '',\n    });\n    console.log(this.state.url, 'url')\n    console.log(this.state.city, 'submit')\n    console.log(this.state.input, 'input')    \n  }\n\n\n  render() {\n    let data = fetch(this.state.url).then((resp) => {\n      resp.json().then((res) => {\n        this.setState({\n          data1: res.weather,\n          data2: res.main,\n          data3: res.wind\n        })\n      })\n    })\n    return (\n      <div className=\"body\">\n        <div className=\"quote-box\">\n          <form onSubmit={this.handleSubmit}>\n            <input\n              value={this.state.input}\n              onChange={this.handleChange}\n              placeholder=\"Enter the city ...\" />\n            <button type='submit'>\n              Search\n            </button>\n          </form>\n\n          <WeatherForecast city={this.state.city} data1={this.state.data1} data2={this.state.data2} data3={this.state.data3} />\n        </div>\n      </div>\n    );\n  }\n};\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}